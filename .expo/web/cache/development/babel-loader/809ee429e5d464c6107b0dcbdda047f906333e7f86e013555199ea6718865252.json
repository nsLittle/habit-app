{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar mongoose = require('mongoose');\nvar bcrypt = require('bcrypt');\nvar UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n    validate: {\n      validator: function validator(value) {\n        return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$/.test(value);\n      },\n      message: \"Password must have at least one uppercase letter, one lowercase letter, and one number.\"\n    }\n  },\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    match: /.+\\@.+\\..+/\n  },\n  profilePic: {\n    type: String,\n    default: 'default-profile.png',\n    validate: {\n      validator: function validator(value) {\n        return /^https?:\\/\\/.+\\..+/.test(value) || /\\.(jpg|jpeg|png|gif)$/i.test(value);\n      },\n      message: \"Profile picture must be a valid URL or an image file path (e.g., .jpg, .png).\"\n    }\n  },\n  habits: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Habit'\n  }],\n  teamMember: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'TeamMember'\n  }]\n}, {\n  timestamps: true\n});\nUserSchema.virtual('fullName').get(function () {\n  return `${this.firstName} ${this.lastName}`;\n});\nUserSchema.pre('save', function () {\n  var _ref = _asyncToGenerator(function* (next) {\n    if (!this.isModified('password')) return next();\n    try {\n      var salt = yield bcrypt.genSalt(10);\n      this.password = yield bcrypt.hash(this.password, salt);\n      next();\n    } catch (err) {\n      next(err);\n    }\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nUserSchema.methods.comparePassword = function () {\n  var _ref2 = _asyncToGenerator(function* (enteredPassword) {\n    return yield bcrypt.compare(enteredPassword, this.password);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = mongoose.model('User', UserSchema);","map":{"version":3,"names":["mongoose","require","bcrypt","UserSchema","Schema","username","type","String","required","unique","minlength","password","validate","validator","value","test","message","firstName","lastName","email","match","profilePic","default","habits","Types","ObjectId","ref","teamMember","timestamps","virtual","get","pre","_ref","_asyncToGenerator","next","isModified","salt","genSalt","hash","err","_x","apply","arguments","methods","comparePassword","_ref2","enteredPassword","compare","_x2","User","model","module","exports"],"sources":["/Users/nslittle/Desktop/Life/coding/habit-app/server/models/User.js"],"sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\n\nconst UserSchema = new mongoose.Schema(\n  {\n    username: { \n      type: String, \n      required: true, \n      unique: true, \n      minlength: 3 \n    },\n    password: { \n      type: String, \n      required: true, \n      minlength: 6, \n      validate: {\n        validator: function (value) {\n          return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$/.test(value);\n        },\n        message: \"Password must have at least one uppercase letter, one lowercase letter, and one number.\"\n      } \n    },\n    firstName: { \n      type: String, \n      required: true \n    },\n    lastName: { \n      type: String, \n      required: true \n    },\n    email: { \n      type: String, \n      required: true, \n      unique: true, \n      match: /.+\\@.+\\..+/ \n    },\n    profilePic: { \n      type: String, \n      default: 'default-profile.png',\n      validate: {\n        validator: function (value) {\n          return /^https?:\\/\\/.+\\..+/.test(value) || /\\.(jpg|jpeg|png|gif)$/i.test(value);\n        },\n        message: \"Profile picture must be a valid URL or an image file path (e.g., .jpg, .png).\"\n      } \n    },\n    habits: [{ \n      type: mongoose.Schema.Types.ObjectId, \n      ref: 'Habit' \n    }],\n    teamMember: [{ \n      type: mongoose.Schema.Types.ObjectId, \n      ref: 'TeamMember' \n    }]\n  },\n  { timestamps: true }\n);\n\nUserSchema.virtual('fullName').get(function () {\n  return `${this.firstName} ${this.lastName}`;\n});\n\nUserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) return next();\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (err) {\n    next(err);\n  }\n});\n\nUserSchema.methods.comparePassword = async function (enteredPassword) {\n  return await bcrypt.compare(enteredPassword, this.password);\n};\n\nconst User = mongoose.model('User', UserSchema);\nmodule.exports = mongoose.model('User', UserSchema); \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}